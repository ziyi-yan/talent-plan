package kway

import (
	"reflect"
	"testing"
)

func TestMerge(t *testing.T) {
	type args struct {
		arrs [][]int64
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			"simple",
			args{
				[][]int64{
					{1, 3, 5, 7},
					{2, 4, 6, 8},
				},
			},
			[]int64{1, 2, 3, 4, 5, 6, 7, 8},
		}, {
			"four arrays",
			args{
				[][]int64{
					{1, 5, 9, 13},
					{2, 6, 10, 14},
					{3, 7, 11, 15},
					{4, 8, 12, 16},
				},
			},
			[]int64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
		}, {
			"variant-length arrays",
			args{
				[][]int64{
					{1, 5, 9, 13, 17, 18},
					{2, 6, 10, 14, 19, 20},
					{3, 7, 11, 15},
					{4, 8, 12, 16},
					{21, 22, 23},
				},
			},
			[]int64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Merge(tt.args.arrs...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Merge() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSort(t *testing.T) {
	type args struct {
		data []int64
	}
	tests := []struct {
		name string
		args args
		want []int64
	}{
		{
			"simple",
			args{
				[]int64{104,
					994,
					438,
					906,
					223,
					368,
					805,
					369,
					264,
					410,
					264,
					388,
					539,
					570,
					427,
					164,
					240,
					146,
					806,
					969,
					463,
					789,
					465,
					58,
					894,
					57,
					856,
					303,
					389,
					602,
					471,
					187,
					931,
					789,
					188,
					218,
					519,
					257,
					223,
					230,
					534,
					813,
					499,
					930,
					223,
					257,
					329,
					555,
					376,
					78,
					953,
					777,
					462,
					988,
					15,
					777,
					527,
					16,
					6,
					784,
					496,
					802,
					680,
					87,
					350,
					71,
					65,
					201,
					805,
					220,
					655,
					709,
					442,
					981,
					738,
					340,
					752,
					360,
					27,
					714,
					340,
					181,
					373,
					229,
					706,
					954,
					46,
					678,
					507,
					360,
					428,
					18,
					205,
					271,
					456,
					303,
					913,
					834,
					204,
					375,
				},
			},
			[]int64{6,
				15,
				16,
				18,
				27,
				46,
				57,
				58,
				65,
				71,
				78,
				87,
				104,
				146,
				164,
				181,
				187,
				188,
				201,
				204,
				205,
				218,
				220,
				223,
				223,
				223,
				229,
				230,
				240,
				257,
				257,
				264,
				264,
				271,
				303,
				303,
				329,
				340,
				340,
				350,
				360,
				360,
				368,
				369,
				373,
				375,
				376,
				388,
				389,
				410,
				427,
				428,
				438,
				442,
				456,
				462,
				463,
				465,
				471,
				496,
				499,
				507,
				519,
				527,
				534,
				539,
				555,
				570,
				602,
				655,
				678,
				680,
				706,
				709,
				714,
				738,
				752,
				777,
				777,
				784,
				789,
				789,
				802,
				805,
				805,
				806,
				813,
				834,
				856,
				894,
				906,
				913,
				930,
				931,
				953,
				954,
				969,
				981,
				988,
				994,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Sort(tt.args.data)
			if !reflect.DeepEqual(tt.args.data, tt.want) {
				t.Errorf("Sort() = %v, want %v", tt.args.data, tt.want)
			}
		})
	}
}
